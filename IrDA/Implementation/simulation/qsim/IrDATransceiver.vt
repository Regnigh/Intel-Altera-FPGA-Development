// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/07/2020 19:02:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ReceiverController
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ReceiverController_vlg_sample_tst(
	baud_rxir,
	bit_done,
	clk,
	ena,
	rst,
	start,
	sampler_tx
);
input  baud_rxir;
input  bit_done;
input  clk;
input  ena;
input  rst;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(baud_rxir or bit_done or clk or ena or rst or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ReceiverController_vlg_check_tst (
	clear_baud,
	clear_bit,
	clear_shift,
	done,
	ena_baud,
	ena_bit,
	inc,
	shift,
	sampler_rx
);
input  clear_baud;
input  clear_bit;
input  clear_shift;
input  done;
input  ena_baud;
input  ena_bit;
input  inc;
input  shift;
input sampler_rx;

reg  clear_baud_expected;
reg  clear_bit_expected;
reg  clear_shift_expected;
reg  done_expected;
reg  ena_baud_expected;
reg  ena_bit_expected;
reg  inc_expected;
reg  shift_expected;

reg  clear_baud_prev;
reg  clear_bit_prev;
reg  clear_shift_prev;
reg  done_prev;
reg  ena_baud_prev;
reg  ena_bit_prev;
reg  inc_prev;
reg  shift_prev;

reg  clear_baud_expected_prev;
reg  clear_bit_expected_prev;
reg  clear_shift_expected_prev;
reg  done_expected_prev;
reg  ena_baud_expected_prev;
reg  ena_bit_expected_prev;
reg  inc_expected_prev;
reg  shift_expected_prev;

reg  last_clear_baud_exp;
reg  last_clear_bit_exp;
reg  last_clear_shift_exp;
reg  last_done_exp;
reg  last_ena_baud_exp;
reg  last_ena_bit_exp;
reg  last_inc_exp;
reg  last_shift_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	clear_baud_prev = clear_baud;
	clear_bit_prev = clear_bit;
	clear_shift_prev = clear_shift;
	done_prev = done;
	ena_baud_prev = ena_baud;
	ena_bit_prev = ena_bit;
	inc_prev = inc;
	shift_prev = shift;
end

// update expected /o prevs

always @(trigger)
begin
	clear_baud_expected_prev = clear_baud_expected;
	clear_bit_expected_prev = clear_bit_expected;
	clear_shift_expected_prev = clear_shift_expected;
	done_expected_prev = done_expected;
	ena_baud_expected_prev = ena_baud_expected;
	ena_bit_expected_prev = ena_bit_expected;
	inc_expected_prev = inc_expected;
	shift_expected_prev = shift_expected;
end



// expected clear_baud
initial
begin
	clear_baud_expected = 1'bX;
end 

// expected clear_bit
initial
begin
	clear_bit_expected = 1'bX;
end 

// expected clear_shift
initial
begin
	clear_shift_expected = 1'bX;
end 

// expected done
initial
begin
	done_expected = 1'bX;
end 

// expected ena_baud
initial
begin
	ena_baud_expected = 1'bX;
end 

// expected ena_bit
initial
begin
	ena_bit_expected = 1'bX;
end 

// expected inc
initial
begin
	inc_expected = 1'bX;
end 

// expected shift
initial
begin
	shift_expected = 1'bX;
end 
// generate trigger
always @(clear_baud_expected or clear_baud or clear_bit_expected or clear_bit or clear_shift_expected or clear_shift or done_expected or done or ena_baud_expected or ena_baud or ena_bit_expected or ena_bit or inc_expected or inc or shift_expected or shift)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clear_baud = %b | expected clear_bit = %b | expected clear_shift = %b | expected done = %b | expected ena_baud = %b | expected ena_bit = %b | expected inc = %b | expected shift = %b | ",clear_baud_expected_prev,clear_bit_expected_prev,clear_shift_expected_prev,done_expected_prev,ena_baud_expected_prev,ena_bit_expected_prev,inc_expected_prev,shift_expected_prev);
	$display("| real clear_baud = %b | real clear_bit = %b | real clear_shift = %b | real done = %b | real ena_baud = %b | real ena_bit = %b | real inc = %b | real shift = %b | ",clear_baud_prev,clear_bit_prev,clear_shift_prev,done_prev,ena_baud_prev,ena_bit_prev,inc_prev,shift_prev);
`endif
	if (
		( clear_baud_expected_prev !== 1'bx ) && ( clear_baud_prev !== clear_baud_expected_prev )
		&& ((clear_baud_expected_prev !== last_clear_baud_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_baud :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_baud_expected_prev);
		$display ("     Real value = %b", clear_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_baud_exp = clear_baud_expected_prev;
	end
	if (
		( clear_bit_expected_prev !== 1'bx ) && ( clear_bit_prev !== clear_bit_expected_prev )
		&& ((clear_bit_expected_prev !== last_clear_bit_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_bit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_bit_expected_prev);
		$display ("     Real value = %b", clear_bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clear_bit_exp = clear_bit_expected_prev;
	end
	if (
		( clear_shift_expected_prev !== 1'bx ) && ( clear_shift_prev !== clear_shift_expected_prev )
		&& ((clear_shift_expected_prev !== last_clear_shift_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_shift :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_shift_expected_prev);
		$display ("     Real value = %b", clear_shift_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clear_shift_exp = clear_shift_expected_prev;
	end
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_done_exp = done_expected_prev;
	end
	if (
		( ena_baud_expected_prev !== 1'bx ) && ( ena_baud_prev !== ena_baud_expected_prev )
		&& ((ena_baud_expected_prev !== last_ena_baud_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ena_baud :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ena_baud_expected_prev);
		$display ("     Real value = %b", ena_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ena_baud_exp = ena_baud_expected_prev;
	end
	if (
		( ena_bit_expected_prev !== 1'bx ) && ( ena_bit_prev !== ena_bit_expected_prev )
		&& ((ena_bit_expected_prev !== last_ena_bit_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ena_bit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ena_bit_expected_prev);
		$display ("     Real value = %b", ena_bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ena_bit_exp = ena_bit_expected_prev;
	end
	if (
		( inc_expected_prev !== 1'bx ) && ( inc_prev !== inc_expected_prev )
		&& ((inc_expected_prev !== last_inc_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inc_expected_prev);
		$display ("     Real value = %b", inc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_inc_exp = inc_expected_prev;
	end
	if (
		( shift_expected_prev !== 1'bx ) && ( shift_prev !== shift_expected_prev )
		&& ((shift_expected_prev !== last_shift_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_expected_prev);
		$display ("     Real value = %b", shift_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_shift_exp = shift_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ReceiverController_vlg_vec_tst();
// constants                                           
// general purpose registers
reg baud_rxir;
reg bit_done;
reg clk;
reg ena;
reg rst;
reg start;
// wires                                               
wire clear_baud;
wire clear_bit;
wire clear_shift;
wire done;
wire ena_baud;
wire ena_bit;
wire inc;
wire shift;

wire sampler;                             

// assign statements (if any)                          
ReceiverController i1 (
// port map - connection between master ports and signals/registers   
	.baud_rxir(baud_rxir),
	.bit_done(bit_done),
	.clear_baud(clear_baud),
	.clear_bit(clear_bit),
	.clear_shift(clear_shift),
	.clk(clk),
	.done(done),
	.ena(ena),
	.ena_baud(ena_baud),
	.ena_bit(ena_bit),
	.inc(inc),
	.rst(rst),
	.shift(shift),
	.start(start)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #40000 1'b1;
end 

// ena
initial
begin
	ena = 1'b1;
	ena = #2400000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #80000 1'b1;
	start = #40000 1'b0;
end 

// baud_rxir
initial
begin
	repeat(62)
	begin
		baud_rxir = 1'b0;
		baud_rxir = #60000 1'b1;
		# 20000;
	end
	baud_rxir = 1'b0;
end 

// bit_done
initial
begin
	bit_done = 1'b0;
	bit_done = #2280000 1'b1;
	bit_done = #40000 1'b0;
end 

ReceiverController_vlg_sample_tst tb_sample (
	.baud_rxir(baud_rxir),
	.bit_done(bit_done),
	.clk(clk),
	.ena(ena),
	.rst(rst),
	.start(start),
	.sampler_tx(sampler)
);

ReceiverController_vlg_check_tst tb_out(
	.clear_baud(clear_baud),
	.clear_bit(clear_bit),
	.clear_shift(clear_shift),
	.done(done),
	.ena_baud(ena_baud),
	.ena_bit(ena_bit),
	.inc(inc),
	.shift(shift),
	.sampler_rx(sampler)
);
endmodule

